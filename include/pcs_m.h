//---------------------------------------------------------------------
//		PCS_M.H
//     Файл объявления переменных и функций модуля PCS 
//---------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
#include <math.h>
#include <string.h>
#include <fcntl.h>
#include <errno.h>
#include <unistd.h>
#include <signal.h>
#include <sys/irqinfo.h>
#include <sys/pci.h>
#include <sys/mman.h>
#include <sys/proxy.h>
#include <sys/kernel.h>
#include <sys/sched.h>
#include <sys/name.h>

#ifndef UN
#define UN unsigned
#endif


#ifndef __PCS_H__
#define __PCS_H__

//=============================================================
//идентификаторы каналов
#define	BU1		1
#define	BU2		2
#define	IK1		3
#define	IK2		4
#define	REZ1 	5
#define	REZ2 	6
#define	MSRS0	7
#define	MSRS1	8

//???????????????????
//??#define	MSRS0	3
//??#define	MSRS1	4
//???????????????????

//режимы работы  сервер - клиент
//команды настойки и управления ПЦС
//типы сообщений
#define INIT_PCS	1   //инициализация ПЦС
#define START_PCS	2	//запускает все каналы ПЦС в работу
#define STOP_PCS	3	//останавливает каналы ПЦС
#define RD_CPCS		4	//считывание из канала ПЦС данных
#define WR_CPCS		5 	//запись в канал ПЦС данных
#define	ERR_PCS		6	//ошибка при работе с ПЦС
#define	RST_CPCS	7	//сброс канала ПЦС

//тип сообщения из/ каналов БУ 
//-----------------------------
#define	MSG_PBU_P	8	//канал ПЦС при работе с 
						//БУ1, БУ2 управляющими
						//пакетам
#define	MSG_PBU_R	9	//канал ПЦС при работе с БУ1, БУ2
						//в режиме ретрансляции

//тип сообщения в каналы БУ 
#define	MSG_WBU_P	18	//канал ПЦС при работе с 
						//БУ1, БУ2 управляющими
						//пакетам
#define	MSG_WBU_R	19	//канал ПЦС при работе с БУ1, БУ2
						//в режиме ретрансляции

//тип сообщения из/в каналы МСРС 
//-----------------------------
#define	R_MSRS0	10		
#define	R_MSRS1	11

#define	W_MSRS0	12		
#define	W_MSRS1	13

//режимы работы  parent - child 
//процессов драйвера
//типы сообщений
#define INT_PRX		21   //запрос Proxy для прерывания
#define PRX_CNL		22	 //передача Proxy для информирования
						 //о приходе сообщения в канале
#define NPRX_CNL	23	 //отключение Proxy для информирования
						 //о приходе сообщения в канале

//--------------------------------
//команды управления блоками БУ
//---------------------
#define	BU_UR		0x71		//получение значения уровня
#define BU_K1K6		0x72		//управление реле К1 - К6
#define BU1_K7		0x74		//управление реле К7 для БУ1
#define BU2_K7		0x73		//управление реле К7 для БУ2
#define BU_RES90	0x75		//управление реле РЭС90
#define BU_BKU		0x76		//получение значения сигналов БКУ
#define BU_ONCBU	0x77		//включение режима контроля
								//исправности БУ
#define BU_VR		0x78	  	//получение версии блока
#define BU_ERR		0x66		//пакет об ошибке

//================================================================

//команды для канала МСРС0
//----------------
#define OFFRadio	0x10	//выключить радиостанцию
#define ONRadio		0x11	//включить радиостанцию
#define	TLED0		0x20	//мигание светодиодом 0
#define	TLED1		0x21	//мигание светодиодом 1
#define	TLED2		0x22	//мигание светодиодом 2
#define	TLED3		0x23	//мигание светодиодом 3
#define	TLED4		0x24	//мигание светодиодом 4
#define	TLED5		0x25	//мигание светодиодом 5
#define	TLED6		0x26	//мигание светодиодом 6
#define	TLED7		0x27	//мигание светодиодом 7
#define STInpMd		0x30	//узнать состояние входов модуля
#define	OC_ARING	0x40	//выдать команду в интерфейс АРИНГ
#define RC_ARING	0x41	//прочитать последнюю принятую
							//от радиостанции команду по АРИНГу 
#define ONT_IO		0x80	//перейти в режим тестирования вх./вых.
#define OFFT_IO		0x81	//выйти из режима тестирования вх./вых.
#define	T_IO		0xC0	//провести тестирование вх./вых.
//----команды генерируемые МСРС0 
#define YDt_ARING	0xF8	//приняты данные по каналу АРИНГ от радиост.
#define	MdfS_Cnd	0xF9	//изменилось состояние сигнала "Исправность"

//команды для канала МСРС1
//----------------
#define TrRadio		0x40	//передать данные из буфера в радиост.
#define	NTrRadio	0x41	//данные из буф. не переданы, не закончена
							//предыдущая передача
#define	FillBuf		0x80	//заполнить данными буфер передачи
#define	RdBuf		0x90	//прочитать буфер принятых данных
#define	StrB		0xB0	//задать преамбулу и стартовый бит
#define SpTr		0xC0	//задать скорость передачи данных
//-----команды генерируемые МСРС1
#define YDtST2		0xF0	//приняты данные по каналу СТЫК С2
#define	ErrDtST2	0xF1	//переполнение буфера при принятии 
							//данных по каналу СТЫК-С2

//Общая команда для МСРС0 и МСРС1
#define RdVMd		0xE0		//прочитать версию модуля МСРС

//константы установки скорости передачи данных 
#define S1200	00
#define S2400	01
#define S4800	02
#define S16000	03
 


//==================================
//		СТРУКТУРЫ
//==================================
//объединение для делителя скорости
union 
	{UN short s_dlt;		
	 UN char uc_dlt[2];
	}dlt;	




// Структуры сообщений передачи информации между процессами 
//----------------------------------------------------------
//Сервер- Клиент
//==========================================================
//инициализация ПЦС
//структура сообщения отсылаемая драйверу (серверу)
typedef struct 	
	{UN short type;			//тип сообщения
	 int 	cnl;			//номер канала (от 1 до 8)
	 						//=0, то инициализируются все каналы сразу
	 int 	speed;		    //скорость
	 int 	b_info;			//кол-во информационных бит
	 int 	b_StrStp;		//кол-во старт/стоп бит
	 UN char b_prt;			//паритет =0 - без паритета
	 						//'O'- нечет
							//'E'- четн
	 UN int   dev;			//тип закрепленного устройства
	 						//=0 - работа в режиме обычного RS
							//или м.б. BU1, BU2, MSRS0, MSRS1  
	 UN int   lvl_inp;		//уровень заполнения FIFO канала
	 						//до прерывания (от 1 до 63)
	}INIT_PCS_s;

//	Примечание. При инициализации канала закрепленного за устройством
//				требуется установить только параметры type и dev

//структура сообщения получемая клиентом от сервера в ответ
typedef struct 
	{UN short type;		//тип сообщения
	 short status;		//результат выполнения команды 
	 					//=0 - норма
	}INIT_PCS_r;

//----------
//старт ПЦС
typedef struct 
	{UN short type;		//тип сообщения
	 int	cnl;		//номер канала (1 - 8)
	 pid_t 	ID_P;		//ID процесса, который будет передавать/
	 					//принимать пакеты по каналу (получаем 
	 					//функциями qnx_getids(...) или geteuid())
	}START_PCS_s;

typedef struct 
	{UN short type;		//тип сообщения
	 pid_t 	Proxy;		//ID Proxy который поучает клиент
	 					//при приходе пакета данных в стартовавшем
						//канале
	 short status;		//результат выполнения команды 
	 					//=0 - норма	
	}START_PCS_r;

//----------------- 
//стоп ПЦС
//останавливает указанный канал ПЦС
//сбрасывает буфера накопления по приему
//отсоединяет Proxy канала от процесса клиента
typedef struct 
	{UN short type;		//тип сообщения
	 int	cnl;		//номер канала (1 - 8)
	}STOP_PCS_s;

typedef struct 
	{UN short type;		//тип сообщения
	 short status;		//результат выполнения команды 
	 					//=0 - норма
	}STOP_PCS_r;

//---------------
//ответ при ошибке
typedef struct 
	{UN short type;		//тип сообщения
	 short status;		//=1 - получена от клиента
	 					//команда неизвесного типа
	}ERR_PCS_r;

	
//------------------------------------
//считать данные накопленные в канале модуля 
//___________
//для сообщения из канала модуля 
union DT_ 
	{UN short	d1;
	 UN char 	d2[2];
	};

//===================================================
//структуры для работы с БУ
//---------------------------
//структура информационной части 
//для ответа пакета управления по БУ
typedef struct
	{UN char cd_cmd;	//1Б код пакета управления
	 union DT_ 	im;     //2Б данные пакета управления 
	}C_PCK;
	
//структура информационной части 
//для пакета ретрансляции от СВЧ к БУ
typedef struct
	{UN char err;		//1Б - ошибка
	 UN char sz_dt;		//1Б - кол-во байт данных
	 UN char dt[28];	//до 28Б - данные
	}R_PCK;

//===================================================
//структуры для работы с МСРС
//-----------------------------
typedef struct
	{UN char cmd;		//код команды
	 UN short stt_in:9;	//состояние вх. модуля
	 UN short :7;		//
	}R_MSRS0_30;

typedef struct
	{UN char cmd;		//код команды
	 UN int cmd_AI;		//данные с Аринга
	}R_MSRS0_41;

typedef struct
	{UN char cmd;		//код команды
	 UN char t_in;		//маска сигналов на вх. модуля
	}R_MSRS0_C0;

typedef struct
	{UN char cmd;		//код команды
	 UN char vr;		//версия модуля МСРС
	}R_MSRS_E0;		//в тестовом режиме

typedef struct
	{UN char cmd;		//код команды
	 UN char sz;		//размер принятых данных
	 UN char dt[256];	//массив принятых данных
	}R_MSRS1_90;		

union MSRS_Rd			
	{UN char 	cmd;
	 R_MSRS0_30 st_30;
	 R_MSRS0_41 st_41;
	 R_MSRS0_C0 st_C0;
	 R_MSRS_E0 	st_E0;
	 R_MSRS1_90 st1_90; 
	};	
//работа сразу через объединение
//по следующим командам
//для МСРС0: 0x10, 0x11, 0x20 - 0x27, 0x40, 0x80
//			 0x81, 0xF8, 0xF9
//для МСРС1: 0x40, 0x41, 0x80,0xB0, 0xC0, 0xF0, 0xF1 
//===================================================
	
//объединение для принятых данных
union IM_ 
	{C_PCK st_cpp;			//пакет управления
	 R_PCK st_rpp;			//пакет ретрансляции
	 union	MSRS_Rd Rd_m;	//для работы с МСРС
	 UN char dt[300];		//массив принятых байт
	};

//___________
typedef struct 
	{UN short type;			//тип сообщения		    
	 int 	cnl;			//номер канала (1 - 8)
	}RD_CPCS_s;

typedef struct 
	{UN short type;			//type==4 - чтение данных без формата		    
							//type==8 - пакет управления БУ
	 						//type==9 - пакет ретрансляции БУ
	 						//type==10 - сообщение из МСРС0
	 						//type==11 - сообщение из МСРС1
	 short status;			//результат выполнения команды 
	 						//=0 - норма
							//-1 - данных нет
							//-2 -канал не стартовал
	 UN int cnt_msg;		//кол-во принятых сообщений
	 				        //(если определена работа с устройством) 
	 UN int  cnt;			//кол-во принятых байт
	 union IM_ 	uim;		//объединение принятых байт
	}RD_CPCS_r;

//-------------------------------------
//записать данные в канал модуля 

//===================================================
//структуры для работы с БУ
//---------------------------
//структура информационной части 
//для ответа пакета управления для БУ
typedef struct
	{UN char cd_cmd;	//1Б код пакета управления
	 union DT_ 	im;     //2Б данные пакета управления 
	}C_PK;
	
//структура информационной части 
//для пакета ретрансляции от БУ к СВЧ
typedef struct
	{UN char sz_dt;		//1Б - кол-во байт данных
	 UN char dt[28];	//до 28Б - данные
	}R_PK;

//===================================================
//структуры для работы с МСРС
//-----------------------------
typedef struct
	{UN char cmd;		//код команды  (от 0x20 до 0x27 )
						//сетодиоды от 0 до 7
	 UN char q_fled:5;	//кол-во миганий  
	 UN char ps:3;		//код паузы
	}W_MSRS0_2N;

typedef struct
	{UN char cmd;		//код команды 
	 UN int cmd_AO;		//команда в Аринг  
	}W_MSRS0_40;

typedef struct
	{UN char cmd;		//код команды 
	 UN char t_out;		//код маски на выходах модуля 
	}W_MSRS0_C0;

typedef struct
	{UN char cmd;		//код команды 
	 UN char sz;		//размер массива для передачи 
	 UN char dt[256];	//массив передачи 
	}W_MSRS1_80;

typedef struct
	{UN char cmd;		//код команды 
	 UN char prmb;		//код преамбулы 
	 UN char strb;		//код стартового бита 
	}W_MSRS1_B0;

typedef struct
	{UN char cmd;		//код команды 
	 UN char spd;		//скорость передачи данных 
	}W_MSRS1_C0;

union MSRS_Wr			
	{UN char 	cmd;
	 W_MSRS0_2N st_2N;
	 W_MSRS0_40 st_40;
	 W_MSRS0_C0 st_C0;
	 W_MSRS1_80 st1_80; 
	 W_MSRS1_B0 st1_B0; 
	 W_MSRS1_C0 st1_C0; 
	};	
//работа сразу через объединение
//по следующим командам (команда состоит из одого кода 
//команды)
//для МСРС0: 0x10, 0x11, 0x30, 0x41, 0x80
//			 0x81, 0xE0
//для МСРС1: 0x40, 0x90, 0xE0. 
	
//===================================================
	
union OM_ 
	{C_PK st_cpo;			//пакет управления
	 R_PK st_rpo;			//пакет ретрансляции
	 union MSRS_Wr Wr_m;	//для работы с МСРС
	 UN char dt[300];		//массив принятых байт
	};

typedef struct 
	{UN short type;			//тип сообщения
	 int 	cnl;			//номер канала (1 - 8)
	 UN int  cnt;			//кол-во байт для передачи
	 union OM_ 	uom;		//объединение записываемых данных
	}WR_CPCS_s;

typedef struct 
	{UN short type;			//тип сообщения
	 short status;			//результат выполнения команды 
	 						//=0 - норма
							//-1 - канал не стартовал
							//-2 - канал не закреплен за БУ
							//-3 - не верная команда управления реле К7 БУ
							//-4 - МСРС0 не в тестовом режиме
							//-5 - ненормапри записи в UART
	}WR_CPCS_r;

//--------------------------------------
//сброс канала модуля 
//сбрасывает буфера накопления по приему
//и FIFO канала(ов)
typedef struct 
	{UN short type;			//тип сообщения
	 int 	cnl;			//номер канала (1 - 8)
	 						//при cnl=0, сбрасываются все каналы модуля 
	}RST_CPCS_s;

typedef struct 
	{UN short type;			//тип сообщения
	 short status;			//результат выполнения команды 
	 						//=0 - норма
	}RST_CPCS_r;


//=================================
//Структуры для передачи сообщений 
//между процессами драйвера
//Parent - Child
//---------------------------------
//запрос Proxy связанного с прерыванием
//от модуля 
typedef struct 	
	{UN short type;			//тип сообщения
	}INT_PRX_s;

typedef struct 
	{UN short type;			//тип сообщения
	 pid_t 	Proxy;			//ID Proxy
	 short status;			//
	}INT_PRX_r;

//настройка Proxy для информирования
//о приходе сообщения в канале
//(по команде старт ПЦС)
typedef struct 	
	{UN short type;		//тип сообщения
	 int cnl;			//номер канала от 0 до 7
	 pid_t 	ID_PRC;		//ID процесса, который стартует 
	 					//(запускает в работу) канал
	}PRX_CNL_s;

typedef struct 
	{UN short type;		//тип сообщения
	 pid_t 	Proxy;		//ID Proxy прикрепленного
	 					//к каналу
	 short status;
	}PRX_CNL_r;

//отключение Proxy для информирования
//о приходе сообщения в канале
//(по команде стоп ПЦС)
typedef struct 	
	{UN short type;		//тип сообщения
	 int cnl;			//номер канала от 0 до 7
	}NPRX_CNL_s;

typedef struct 
	{UN short type;		//тип сообщения
	 short status;
	}NPRX_CNL_r;

//=====================================

//объединения для работы
union 
	{UN short 		type;		//тип сообщения
	 INIT_PCS_s 	ini_s;
	 START_PCS_s  	str_s;
	 STOP_PCS_s  	stp_s;
	 RD_CPCS_s 		rd_s;
	 WR_CPCS_s 		wr_s;
	 RST_CPCS_s		rstc_s;
	 INT_PRX_s 		int_s;
	 PRX_CNL_s  	prc_s;
	 NPRX_CNL_s  	nprc_s;
	}msg_ic;	

union 
	{UN short 		type;		//тип сообщения
	 INIT_PCS_r 	ini_r;
	 START_PCS_r  	str_r;
	 STOP_PCS_r  	stp_r;
	 RD_CPCS_r 		rd_r;
	 WR_CPCS_r 		wr_r;
	 RST_CPCS_r		rstc_r;
	 ERR_PCS_r  	er_r;
	 INT_PRX_r 	    int_r;
	 PRX_CNL_r      prc_r;
	 NPRX_CNL_r     nprc_r;
	}msg_oc;	

#endif
